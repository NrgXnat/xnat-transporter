buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://nrgxnat.artifactoryonline.com/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        maven {
            url 'https://nrgxnat.artifactoryonline.com/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "org.nrg.xnat.build:gradle-xnat-plugin:1.7.0-SNAPSHOT"
    }
}

apply plugin: 'java'
apply plugin: 'xnat'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

group 'org.nrg'
version '1.0-SNAPSHOT'

def vXnat = '1.7.0-SNAPSHOT'
def vSpring = '4.2.4.RELEASE'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url 'http://nrgxnat.artifactoryonline.com/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'http://nrgxnat.artifactoryonline.com/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'http://nrgxnat.artifactoryonline.com/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

if (hasProperty("rt.17.jar")) {
    // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
    // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
    def rt17jar = getProperty("rt.17.jar")
    logger.info "Using ${rt17jar} as the bootstrap class path jar."
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.fork = true
            options.compilerArgs << "-XDignore.symbol.file"
            options.bootClasspath = rt17jar
        }
    }
} else {
    logger.warn "No value was set for the rt.17.jar build property, using the default bootstrap class path. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
    logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
}

dependencies {
    compile ("org.nrg.xnat:web:${vXnat}") {
        transitive = false
    }
    compile ("org.nrg.xnat:xnat-data-models:${vXnat}") {
        transitive = false
    }
    compile "org.nrg.xdat:core:${vXnat}"
    compile ("org.nrg:framework:${vXnat}")

    compile "org.springframework:spring-core:${vSpring}"
    compile "org.springframework:spring-context:${vSpring}"

    compile "com.google.guava:guava:19.0"

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'XNAT Transporter')
                root.appendNode('description', 'XNAT module for transporting files.')
                root.appendNode('url', 'https://github.com/nrgxnat/xnat-transporter')
                root.appendNode('inceptionYear', '2016')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/nrgxnat/xnat-transporter')
                scm.appendNode('connection', 'scm:https://github.com/nrgxnat/xnat-transporter.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:nrgxnat/xnat-transporter')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Simplified BSD 2-Clause License')
                license.appendNode('url', 'http://xnat.org/about/license.php')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def rherrick = developers.appendNode('developer')
                rherrick.appendNode('id', 'jflavin')
                rherrick.appendNode('name', 'John Flavin')
                rherrick.appendNode('email', 'jflavin@wustl.edu')
            }
        }
    }
    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault('repoUsername', 'username')
                password propertyWithDefault('repoPassword', 'password')
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://nrgxnat.artifactoryonline.com/nrgxnat/libs-snapshot-local"
            } else {
                url "https://nrgxnat.artifactoryonline.com/nrgxnat/libs-release-local"
            }
        }
    }
}

def propertyWithDefault(def String property, def Object value) {
    hasProperty(property) ? getProperty(property) : value
}
