buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

group 'org.nrg'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def vXnat = '1.7.3'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.nrg:parent:${vXnat}"
    }
}

dependencies {
    compile ("org.nrg.xnat:web") {
        transitive = false
    }
    compile ("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    compile "org.nrg.xdat:core"
    compile "org.nrg:framework"

    compile "org.springframework:spring-core"
    compile "org.springframework:spring-context"

    compile "com.google.guava:guava"

    testCompile group: 'junit', name: 'junit'

}

//task sourceJar(type: Jar, dependsOn: classes) {
//    from sourceSets.main.allSource
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    from javadoc.destinationDir
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

//            artifact sourceJar {
//                classifier "sources"
//            }
//
//            artifact javadocJar {
//                classifier "javadoc"
//            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'XNAT Transporter')
                root.appendNode('description', 'XNAT module for transporting files.')
                root.appendNode('url', 'https://github.com/nrgxnat/xnat-transporter')
                root.appendNode('inceptionYear', '2016')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/nrgxnat/xnat-transporter')
                scm.appendNode('connection', 'scm:https://github.com/nrgxnat/xnat-transporter.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:nrgxnat/xnat-transporter')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Simplified BSD 2-Clause License')
                license.appendNode('url', 'http://xnat.org/about/license.php')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def flavin = developers.appendNode('developer')
                flavin.appendNode('id', 'jflavin')
                flavin.appendNode('name', 'John Flavin')
                flavin.appendNode('email', 'jflavin@wustl.edu')
            }
        }
    }
    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault('repoUsername', 'username')
                password propertyWithDefault('repoPassword', 'password')
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
            } else {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
            }
        }
    }
}

def propertyWithDefault(def String property, def Object value) {
    hasProperty(property) ? getProperty(property) : value
}
